// Generated by gencpp from file pepper_training/QLearnMatrix.msg
// DO NOT EDIT!


#ifndef PEPPER_TRAINING_MESSAGE_QLEARNMATRIX_H
#define PEPPER_TRAINING_MESSAGE_QLEARNMATRIX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pepper_training/QLearnElement.h>

namespace pepper_training
{
template <class ContainerAllocator>
struct QLearnMatrix_
{
  typedef QLearnMatrix_<ContainerAllocator> Type;

  QLearnMatrix_()
    : q_learn_matrix()  {
    }
  QLearnMatrix_(const ContainerAllocator& _alloc)
    : q_learn_matrix(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::pepper_training::QLearnElement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pepper_training::QLearnElement_<ContainerAllocator> >::other >  _q_learn_matrix_type;
  _q_learn_matrix_type q_learn_matrix;





  typedef boost::shared_ptr< ::pepper_training::QLearnMatrix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pepper_training::QLearnMatrix_<ContainerAllocator> const> ConstPtr;

}; // struct QLearnMatrix_

typedef ::pepper_training::QLearnMatrix_<std::allocator<void> > QLearnMatrix;

typedef boost::shared_ptr< ::pepper_training::QLearnMatrix > QLearnMatrixPtr;
typedef boost::shared_ptr< ::pepper_training::QLearnMatrix const> QLearnMatrixConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pepper_training::QLearnMatrix_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pepper_training::QLearnMatrix_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pepper_training

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pepper_training': ['/home/marie/research_pepper/src/pepper_training/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pepper_training::QLearnMatrix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pepper_training::QLearnMatrix_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pepper_training::QLearnMatrix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pepper_training::QLearnMatrix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pepper_training::QLearnMatrix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pepper_training::QLearnMatrix_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pepper_training::QLearnMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1d271db6fedbe3a1e9e76a0df239d5a";
  }

  static const char* value(const ::pepper_training::QLearnMatrix_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1d271db6fedbe3aULL;
  static const uint64_t static_value2 = 0x1e9e76a0df239d5aULL;
};

template<class ContainerAllocator>
struct DataType< ::pepper_training::QLearnMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pepper_training/QLearnMatrix";
  }

  static const char* value(const ::pepper_training::QLearnMatrix_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pepper_training::QLearnMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pepper_training/QLearnElement[] q_learn_matrix\n\
================================================================================\n\
MSG: pepper_training/QLearnElement\n\
pepper_training/QLearnPoint qlearn_point\n\
std_msgs/Float32 reward\n\
\n\
================================================================================\n\
MSG: pepper_training/QLearnPoint\n\
std_msgs/String state_tag\n\
std_msgs/Int32 action_number\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
";
  }

  static const char* value(const ::pepper_training::QLearnMatrix_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pepper_training::QLearnMatrix_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q_learn_matrix);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QLearnMatrix_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pepper_training::QLearnMatrix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pepper_training::QLearnMatrix_<ContainerAllocator>& v)
  {
    s << indent << "q_learn_matrix[]" << std::endl;
    for (size_t i = 0; i < v.q_learn_matrix.size(); ++i)
    {
      s << indent << "  q_learn_matrix[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pepper_training::QLearnElement_<ContainerAllocator> >::stream(s, indent + "    ", v.q_learn_matrix[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEPPER_TRAINING_MESSAGE_QLEARNMATRIX_H
