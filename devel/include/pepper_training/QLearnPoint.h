// Generated by gencpp from file pepper_training/QLearnPoint.msg
// DO NOT EDIT!


#ifndef PEPPER_TRAINING_MESSAGE_QLEARNPOINT_H
#define PEPPER_TRAINING_MESSAGE_QLEARNPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/Int32.h>

namespace pepper_training
{
template <class ContainerAllocator>
struct QLearnPoint_
{
  typedef QLearnPoint_<ContainerAllocator> Type;

  QLearnPoint_()
    : state_tag()
    , action_number()  {
    }
  QLearnPoint_(const ContainerAllocator& _alloc)
    : state_tag(_alloc)
    , action_number(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _state_tag_type;
  _state_tag_type state_tag;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _action_number_type;
  _action_number_type action_number;





  typedef boost::shared_ptr< ::pepper_training::QLearnPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pepper_training::QLearnPoint_<ContainerAllocator> const> ConstPtr;

}; // struct QLearnPoint_

typedef ::pepper_training::QLearnPoint_<std::allocator<void> > QLearnPoint;

typedef boost::shared_ptr< ::pepper_training::QLearnPoint > QLearnPointPtr;
typedef boost::shared_ptr< ::pepper_training::QLearnPoint const> QLearnPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pepper_training::QLearnPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pepper_training::QLearnPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pepper_training

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pepper_training': ['/home/marie/research_pepper/src/pepper_training/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pepper_training::QLearnPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pepper_training::QLearnPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pepper_training::QLearnPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pepper_training::QLearnPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pepper_training::QLearnPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pepper_training::QLearnPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pepper_training::QLearnPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fdfa6d65584c76899b1ef7f3f790a2c";
  }

  static const char* value(const ::pepper_training::QLearnPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fdfa6d65584c768ULL;
  static const uint64_t static_value2 = 0x99b1ef7f3f790a2cULL;
};

template<class ContainerAllocator>
struct DataType< ::pepper_training::QLearnPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pepper_training/QLearnPoint";
  }

  static const char* value(const ::pepper_training::QLearnPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pepper_training::QLearnPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String state_tag\n\
std_msgs/Int32 action_number\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
";
  }

  static const char* value(const ::pepper_training::QLearnPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pepper_training::QLearnPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_tag);
      stream.next(m.action_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QLearnPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pepper_training::QLearnPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pepper_training::QLearnPoint_<ContainerAllocator>& v)
  {
    s << indent << "state_tag: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.state_tag);
    s << indent << "action_number: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.action_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEPPER_TRAINING_MESSAGE_QLEARNPOINT_H
