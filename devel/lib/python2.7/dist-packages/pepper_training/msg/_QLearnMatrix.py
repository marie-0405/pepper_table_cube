# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pepper_training/QLearnMatrix.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pepper_training.msg
import std_msgs.msg

class QLearnMatrix(genpy.Message):
  _md5sum = "d1d271db6fedbe3a1e9e76a0df239d5a"
  _type = "pepper_training/QLearnMatrix"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """pepper_training/QLearnElement[] q_learn_matrix
================================================================================
MSG: pepper_training/QLearnElement
pepper_training/QLearnPoint qlearn_point
std_msgs/Float32 reward

================================================================================
MSG: pepper_training/QLearnPoint
std_msgs/String state_tag
std_msgs/Int32 action_number
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['q_learn_matrix']
  _slot_types = ['pepper_training/QLearnElement[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       q_learn_matrix

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QLearnMatrix, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.q_learn_matrix is None:
        self.q_learn_matrix = []
    else:
      self.q_learn_matrix = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.q_learn_matrix)
      buff.write(_struct_I.pack(length))
      for val1 in self.q_learn_matrix:
        _v1 = val1.qlearn_point
        _v2 = _v1.state_tag
        _x = _v2.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = _v1.action_number
        _x = _v3.data
        buff.write(_get_struct_i().pack(_x))
        _v4 = val1.reward
        _x = _v4.data
        buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.q_learn_matrix is None:
        self.q_learn_matrix = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.q_learn_matrix = []
      for i in range(0, length):
        val1 = pepper_training.msg.QLearnElement()
        _v5 = val1.qlearn_point
        _v6 = _v5.state_tag
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v6.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v6.data = str[start:end]
        _v7 = _v5.action_number
        start = end
        end += 4
        (_v7.data,) = _get_struct_i().unpack(str[start:end])
        _v8 = val1.reward
        start = end
        end += 4
        (_v8.data,) = _get_struct_f().unpack(str[start:end])
        self.q_learn_matrix.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.q_learn_matrix)
      buff.write(_struct_I.pack(length))
      for val1 in self.q_learn_matrix:
        _v9 = val1.qlearn_point
        _v10 = _v9.state_tag
        _x = _v10.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v11 = _v9.action_number
        _x = _v11.data
        buff.write(_get_struct_i().pack(_x))
        _v12 = val1.reward
        _x = _v12.data
        buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.q_learn_matrix is None:
        self.q_learn_matrix = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.q_learn_matrix = []
      for i in range(0, length):
        val1 = pepper_training.msg.QLearnElement()
        _v13 = val1.qlearn_point
        _v14 = _v13.state_tag
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v14.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v14.data = str[start:end]
        _v15 = _v13.action_number
        start = end
        end += 4
        (_v15.data,) = _get_struct_i().unpack(str[start:end])
        _v16 = val1.reward
        start = end
        end += 4
        (_v16.data,) = _get_struct_f().unpack(str[start:end])
        self.q_learn_matrix.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
